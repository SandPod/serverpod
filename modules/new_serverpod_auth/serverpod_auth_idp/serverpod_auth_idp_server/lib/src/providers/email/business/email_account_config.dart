import 'package:serverpod/serverpod.dart';
import 'package:serverpod_auth_idp_server/core.dart';

import '../util/registration_password_policy.dart';
import '../util/verification_code_generator.dart';

/// Function to be called to check whether a password matches the requirements during registration.
typedef PasswordValidationFunction = bool Function(
  String password,
);

/// Function for sending out the verification codes to verify the email ownership during the initial registration.
typedef SendRegistrationVerificationCodeFunction = void Function(
  Session session, {
  required String email,
  required UuidValue accountRequestId,

  /// The code that was generated by [registrationVerificationCodeGenerator] to verify this registration request.
  required String verificationCode,
  required Transaction transaction,
});

/// Function for sending out the verification codes for password reset requests.
typedef SendPasswordResetVerificationCodeFunction = void Function(
  Session session, {
  required String email,
  required UuidValue passwordResetRequestId,

  /// The code that was generated by [passwordResetCodeGenerator] to verify this registration request.
  required String verificationCode,
  required Transaction transaction,
});

/// Configuration options for the email account module.
class EmailAccountConfig implements ProviderConfiguration {
  static late EmailAccountConfig _config;

  /// The singleton instance of the email account configuration used
  /// throughout the provider.
  static EmailAccountConfig get instance => _config;

  static IssueTokenFunction? _issueToken;

  /// The time for the registration email verification code to be valid.
  ///
  ///  Default is 15 minutes.
  final Duration registrationVerificationCodeLifetime;

  /// Function returning the registration verification code.
  ///
  /// By default this is a 8 digits alpha-numeric lower-case code.
  final String Function() registrationVerificationCodeGenerator;

  /// How many attempts are permitted for an email verification code (during the [registrationVerificationCodeLifetime] window).
  ///
  /// Defaults to 3.
  final int registrationVerificationCodeAllowedAttempts;

  /// The time for password reset verification codes to be valid.
  ///
  ///  Default is 15 minutes.
  final Duration passwordResetVerificationCodeLifetime;

  /// How many attempts are permitted for a single password reset verification code (during the [passwordResetVerificationCodeLifetime] window).
  ///
  /// Defaults to 3.
  final int passwordResetVerificationCodeAllowedAttempts;

  /// Function returning the password rest verification code.
  ///
  /// By default this is a 8 digits alpha-numeric lower-case code.
  final String Function() passwordResetVerificationCodeGenerator;

  /// The maximum number of failed logins for the same email OR from the same IP address.
  ///
  /// Successful logins are not counted or limited.
  ///
  /// Defaults to allowing up to 5 request for a sliding 5 minute.
  /// Beyond that, login request will be rejected without checking the credentials.
  final RateLimit failedLoginRateLimit;

  /// Callback to be invoked for sending outgoing registration emails for the email address verification.
  final SendRegistrationVerificationCodeFunction?
      sendRegistrationVerificationCode;

  /// Callback to be invoked for sending outgoing password reset emails.
  final SendPasswordResetVerificationCodeFunction?
      sendPasswordResetVerificationCode;

  /// Function to check passwords against a policy during registration and password change.
  ///
  /// If the rules are changed after a password has been set, subsequent logins with
  /// the old password are still accepted and the user will not be forced to update it.
  ///
  /// Defaults to ensuring that the password is not padded by whitespace and is at least 8 characters long.
  final PasswordValidationFunction passwordValidationFunction;

  /// How many password reset attempts are allowed for the same email OR from the same IP address.
  ///
  /// Defaults to allowing at most 3 attempts in the last hour.
  final RateLimit maxPasswordResetAttempts;

  /// The length of the random hash in bytes to be used for each password.
  ///
  /// Defaults to 16.
  final int passwordHashSaltLength;

  /// Create a new email account configuration.
  ///
  /// Set [current] to apply this configuration.
  EmailAccountConfig({
    this.registrationVerificationCodeLifetime = const Duration(minutes: 15),
    this.registrationVerificationCodeAllowedAttempts = 3,
    this.registrationVerificationCodeGenerator =
        defaultVerificationCodeGenerator,
    this.passwordResetVerificationCodeLifetime = const Duration(minutes: 15),
    this.passwordResetVerificationCodeAllowedAttempts = 3,
    this.passwordResetVerificationCodeGenerator =
        defaultVerificationCodeGenerator,
    this.sendRegistrationVerificationCode,
    this.sendPasswordResetVerificationCode,
    this.failedLoginRateLimit = (
      maxAttempts: 5,
      timeframe: const Duration(minutes: 5),
    ),
    this.passwordValidationFunction =
        defaultRegistrationPasswordValidationFunction,
    this.maxPasswordResetAttempts = (
      timeframe: const Duration(hours: 1),
      maxAttempts: 3,
    ),
    this.passwordHashSaltLength = 16,
  });

  /// ALEX: This should probably take a token issuer configuration directly
  /// so that it can be initialized without the [CommonLogic] class.
  @override
  void initialize(CommonLogic conf) {
    _config = this;
    _issueToken = conf.tokenIssuer;
  }
}

extension HiddenEmailAccountConfigExtension on EmailAccountConfig {
  /// Issues a token for the given user.
  static Future<AuthSuccess> issueToken({
    required Session session,
    required UuidValue authUserId,
    required String method,
    required Set<Scope>? scopes,
    required Transaction? transaction,
  }) async {
    var tokenIssuer = EmailAccountConfig._issueToken;
    if (tokenIssuer == null) {
      throw StateError('EmailAccountConfig is not initialized');
    }

    return tokenIssuer(
      session: session,
      authUserId: authUserId,
      method: method,
      scopes: scopes,
      transaction: transaction,
    );
  }

  /// Set the current email account configuration.
  static set config(EmailAccountConfig newConfig) {
    EmailAccountConfig._config = newConfig;
  }
}

/// A rolling rate limit which allows [maxAttempts] in the most recent [timeframe].
typedef RateLimit = ({int maxAttempts, Duration timeframe});
